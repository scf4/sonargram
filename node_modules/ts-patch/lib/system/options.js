"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resetOptions = exports.parseOptions = exports.appOptions = exports.defaultOptions = void 0;
var logger_1 = require("./logger");
var errors_1 = require("./errors");
var helpers_1 = require("./helpers");
var file_utils_1 = require("../file-utils");
exports.defaultOptions = {
    logLevel: logger_1.Log.normal,
    color: true,
    silent: false,
    verbose: false,
    basedir: process.cwd(),
    instanceIsCLI: false
};
/** App-wide options storage */
exports.appOptions = __assign({}, exports.defaultOptions);
/* ********************************************************************************************************************
 * Parser
 * ********************************************************************************************************************/
/**
 * Create full options object using user input and assigns it to appOptions
 */
var parseOptions = function (options) {
    if (!options || (options === exports.appOptions))
        return exports.appOptions;
    var has = function (key) { return options.hasOwnProperty(key); };
    if (has('color'))
        exports.appOptions.color = options['color'];
    if (has('global') && has('basedir'))
        throw new errors_1.OptionsError("Cannot specify both --global and --basedir");
    if (has('global'))
        options.basedir = file_utils_1.getGlobalTSDir();
    Object.assign(exports.appOptions, helpers_1.pick.apply(void 0, __spreadArray([options], helpers_1.getKeys(exports.defaultOptions))));
    exports.appOptions.logLevel =
        (exports.appOptions.silent) ? logger_1.Log.system :
            (exports.appOptions.verbose) ? logger_1.Log.verbose :
                (exports.appOptions.instanceIsCLI) ? logger_1.Log.normal :
                    exports.defaultOptions.logLevel;
    return exports.appOptions;
};
exports.parseOptions = parseOptions;
var resetOptions = function (options) { return exports.parseOptions(__assign(__assign({}, exports.defaultOptions), options)); };
exports.resetOptions = resetOptions;
//# sourceMappingURL=options.js.map